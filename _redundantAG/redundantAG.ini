opts :=

####################################################### templateFinder #######################################################

primeNumber = 40009,
# possible values: prime number, default: 40009
# number of elements in the finite field, it should be large enough to minimize the probability of invalid templates

constPols = 1,
# possible values: 0/1/list of positive integers, default: 1
# 0 - no polynomials are treated as constant
# 1 - try to automatically find constant polynomials (applicable if the function for creating polynomials is available in F_prob.m)
# list of positive integers, e.g. [1,2] - the specified polynomials are treated as constant (they must have constant coefficients for all instances of the problem)

iVars = [],
# possible values: list of positive integers, default: []
# e.g. [1,2] - the specified variables are replaced with their reciprocals in the original system

removePols = 0,
# possible values: 0/1/list of positive integers, default: 0
# 0 - no polynomials removed
# 1 - try to automatically remove high degree polynomials from the original system without changing the ideal (may be time consuming)
# list of positive integers, e.g. [1,2] - the specified polynomials are removed from the original system (this may change the ideal)

manShifts = [],
# possible values: empty list/list of lists of Laurent monomials, default: []
# manual shifting monomials, e.g. [[1,x,1/y], [1], [x^2,y]] - the number of sublists must equal the number of polynomials in the original system
# some sublists may be empty, which means that the corresponding polynomials are removed from the original system (this may change the ideal)
# it can be copied/pasted from row #6 of templates/t_prob

sShifts = 1,
# possible values: -1/0/1, default: 1
# neighboring monomial selection strategy in the shift construction function, set to 1 for polynomial systems

sActMons = 3,
# possible values: 1/2/3/4/list of Laurent monomials, default: 3
# action monomial selection strategy
# 1 - variables only
# 2 - only reciprocals of variables
# 3 - both variables and their reciprocals
# 4 - variables, their reciprocals, and all possible homogeneous monomials of type x/y
# non-empty list of Laurent monomials, e.g. [x, x^2, 1/y, y/x] - only the specified monomials are tried as the action monomials

dChange = 100,
# possible values: non-negative integer, default: 100
# change the shift construction function from shifts() to shifts1() as d > dChange
# set to 100 to use shifts() only (faster but usually larger templates)
# set to 0 to use shifts1() only (slower but usually smaller templates)
# tip: run templateFinder(prob) with dChange = 100; if a template is found for d = d0, then re-run templateFinder(prob) while decrementing dChange from d0-1 down to 0; generate solvers for all (or the most promising) templates, compare their performance and select the best one

maxTD = 100,
# possible values: positive integer, default: 100
# maximum number of elimination templates to search

indepVars = [],
# possible values: list of variables, e.g. [x], default: []
# assign random values to the variables from indepVars to generate solvers for positive-dimensional ideals (experimental)

####################################################### templateReduction #######################################################

mRed = 1,
# possible values: 1/2, default: 1
# template reduction method (1 - better reduction, 2 - faster)

nRootTol = 0,
# possible values: non-negative integer, default: 0
# allow to increase the number of roots by this value during reduction (applicable to mRed = 1 only)

showInfo = 1,
# possible values: 0/1, default: 1
# 0 - show the raw intermediate template data during reduction (faster)
# 1 - show the processed intermediate template data during reduction (slower)

####################################################### solverGenerator #######################################################

language = 1,
# possible values: 1/2/3, default: 1
# 1 - generate MATLAB solver
# 2 - generate Julia solver
# 3 - generate Python solver

showPM = 0,
# possible values: 0/1, default: 0
# show the list of permissible monomials (this can be helpful for manual reduction)

colpiv = 0,
# possible values: 0/1, default: 0
# apply the column-pivoting strategy (applicable to language = 1,2 only)

createCoefsFile = 1,
# possible values: 0/1, default: 1
# create (if possible) the files inidata_prob.m and coefs_prob.m for computing initial Macaulay matrix

createTestFile = 1,
# possible values: 0/1, default: 1
# create the test file test_num_prob.m

createSolverFile = 1,
# possible values: 0/1, default: 1
# create the solver file red_mxn_(colpiv_)prob.m

####################################################### rootFinder #######################################################

mRoot = 1,
# possible values: 1/2, default: 1
# root finding method
# 1 - elimination template method
# 2 - Groebner basis method (applicable to 0-dimensional polynomial systems only)

nDigits = 30,
# possible values: positive integer, default: 30
# number of digits for software floating-point calculations

showRREF = 0,
# possible values: 0/1, default: 0
# show the reduced row echelon form of template (applicable to mRoot = 1 only)

showAM = 0,
# possible values: 0/1, default: 0
# show the action matrix

showCP = 0,
# possible values: 0/1, default: 0
# show the factorized characteristic polynomial (applicable to mRoot = 1 only)
# it may be time consuming

showAP = 0:
# possible values: 0/1, default: 0
# show the action polynomial (applicable to mRoot = 2 only)