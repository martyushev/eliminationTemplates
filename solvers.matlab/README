Collection of state-of-the-art MATLAB solvers for minimal problems


If you use this code, please cite (one of) the following works:

1)
@inproceedings{martyushev2022optimizing,
  title={Optimizing Elimination Templates by Greedy Parameter Search},
  author={Martyushev, Evgeniy and Vrablikova, Jana and Pajdla, Tomas},
  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},
  pages={15754--15764},
  year={2022}
}
Published version:
https://openaccess.thecvf.com/content/CVPR2022/papers/Martyushev_Optimizing_Elimination_Templates_by_Greedy_Parameter_Search_CVPR_2022_paper.pdf

2)
@article{martyushev2023automatic,
  title={Automatic Solver Generator for Systems of Laurent Polynomial Equations},
  author={Martyushev, Evgeniy and Bhayani, Snehal and Pajdla, Tomas},
  journal={https://arxiv.org/abs/2307.00320},
  year={2023}
}


E-mail: martiushevev@susu.ru
Project page: https://github.com/martyushev/eliminationTemplates


Tested on MATLAB R2019b


How to use:

1) Run MATLAB and type:
 >> run('path/to/solvers.matlab/add_all.m')
 >> test_num_prob


Folders:

1) _common: help functions common to multiple problems
2) _results: output data (pdf-figures)
3) prob: problem folder containing either 4 or 5 m-files:
 3.1) inidata_num_prob: generates random initial data
 3.2) coefs_prob: computes initial Macaulay (coefficient) matrix (C), monomial vector (U) and matrix of partial derivatives (dU)
 3.3) test_num_prob: evaluates speed, numerical accuracy, fail rate, etc.
 3.4) red_mxn(_colpiv)_prob: solver created by redundantAG (m x n - template size, colpiv - if column-pivoting strategy used)
 3.5) (n)std_mxn(_colpiv)_prob: solver created by greedyAG (std/nstd - standard/non-standard quotient space basis, m x n - template size, colpiv - if column-pivoting strategy used)